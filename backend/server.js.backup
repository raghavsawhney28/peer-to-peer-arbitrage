const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5001;

// Import routes
const tradesRoutes = require('./routes/trades');
const summaryRoutes = require('./routes/summary');
const pnlRoutes = require('./routes/pnl');

// Security middleware
app.use(helmet());
app.use(compression());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

// CORS configuration
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Database connection middleware
const requireDB = (req, res, next) => {
  if (mongoose.connection.readyState !== 1) {
    return res.status(503).json({
      success: false,
      message: 'Database not connected. Please try again later.',
      error: 'DATABASE_CONNECTION_ERROR'
    });
  }
  next();
};

// API routes
app.use('/api/trades', requireDB, tradesRoutes);
app.use('/api/summary', requireDB, summaryRoutes);
app.use('/api/pnl', requireDB, pnlRoutes);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error('Global error:', err);
  res.status(err.status || 500).json({
    error: err.message || 'Internal server error',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// MongoDB connection
const connectDB = async () => {
  try {
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/p2p_arbitrage';
    console.log('Attempting to connect to MongoDB...');
    console.log('MongoDB URI:', mongoURI);
    
    await mongoose.connect(mongoURI);
    console.log('✅ Connected to MongoDB successfully');
    
    // Start server after successful DB connection
    startServer();
  } catch (err) {
    console.error('❌ MongoDB connection error:', err.message);
    
    if (process.env.NODE_ENV === 'development' && process.env.SKIP_DB === 'true') {
      console.log('⚠️  Development mode: Starting server without MongoDB connection');
      startServer();
    } else {
      console.log('\n💡 To fix this issue:');
      console.log('1. Install MongoDB locally: https://docs.mongodb.com/manual/installation/');
      console.log('2. Or use MongoDB Atlas (cloud): https://www.mongodb.com/cloud/atlas');
      console.log('3. Set MONGODB_URI in your .env file');
      console.log('4. Or start MongoDB service: mongod');
      console.log('5. For development: Set SKIP_DB=true in .env to bypass DB requirement');
      console.log('\n🔄 Retrying connection in 5 seconds...');
      
      // Retry connection after 5 seconds
      setTimeout(connectDB, 5000);
    }
  }
};

// Start server function
const startServer = () => {
  console.log(`🔍 Debug: PORT variable value is: ${PORT}`);
  app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
    console.log(`📊 API available at http://localhost:${PORT}/api`);
    console.log(`🔍 Health check: http://localhost:${PORT}/api/health`);
    
    if (!mongoose.connection.readyState) {
      console.log('⚠️  Note: MongoDB not connected - some features may not work');
    }
  });
};

// Start the application
connectDB();

module.exports = app;